import re
import os
import logging
import asyncio
import threading
import requests
from flask import Flask
from telethon import TelegramClient, events
import time

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = Flask(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
api_id = int(os.getenv("API_ID", "0"))
api_hash = os.getenv("API_HASH", "")
source_channel_id = int(os.getenv("SOURCE_CHANNEL_ID", "0"))
destination_channel_id = int(os.getenv("DESTINATION_CHANNEL_ID", "0"))
session_name = os.getenv("SESSION_NAME", "session")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
if not api_id or not api_hash or not source_channel_id or not destination_channel_id:
    raise ValueError("‚ùå –û–®–ò–ë–ö–ê: –û–¥–Ω–∞ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ –∑–∞–¥–∞–Ω—ã!")

logger.info(f"API_ID: {api_id}, API_HASH: {api_hash}, SOURCE_CHANNEL_ID: {source_channel_id}, DESTINATION_CHANNEL_ID: {destination_channel_id}")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram-–∫–ª–∏–µ–Ω—Ç–∞
client = TelegramClient(session_name, api_id, api_hash)

# –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤ –¥–ª—è —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
blacklist_words = {"–¥–æ–Ω–∞—Ç", "–ø—ñ–¥—Ç—Ä–∏–º–∞—Ç–∏", "—Ä–µ–∫–ª–∞–º–∞", "–ø—ñ–¥–ø–∏—Å–∫–∞", "–ø–µ—Ä–µ–∫–∞–∑ –Ω–∞ –∫–∞—Ä—Ç—É", "–ø–æ–∂–µ—Ä—Ç–≤–∞", "–¥–æ–ø–æ–º–æ–≥–∞", "–ø—ñ–¥—Ç—Ä–∏–º–∫–∞", "–∑–±—ñ—Ä", "–∑–∞–¥–æ–Ω–∞—Ç–∏—Ç–∏"}

# –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
card_pattern = re.compile(r'\b(?:\d[ -]*){12,19}\b|\bUA\d{25,}\b')
url_pattern = re.compile(r'https?://\S+', re.IGNORECASE)
city_pattern = re.compile(r'–°—Ç–µ–∂–∏—Ç–∏ –∑–∞ –æ–±—Å—Ç–∞–Ω–æ–≤–∫–æ—é .*? –º–æ–∂–Ω–∞ —Ç—É—Ç - \S+', re.IGNORECASE)
random_letters_pattern = re.compile(r'^\s*[–∞-—è–ê-–Øa-zA-Z]{4,}\s*$', re.MULTILINE)
unwanted_text_pattern = re.compile(r'(–ü—ñ–¥—Ç—Ä–∏–º–∞—Ç–∏ –∫–∞–Ω–∞–ª, –±—É–¥—É –≤–¥—è—á–Ω–∏–π –í–∞–º:|üîó–ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –±–∞–Ω–∫—É)', re.IGNORECASE)

extra_text = 'üá∫üá¶ <a href="https://t.me/+9RxqorgcHYZkYTQy">–ù–µ–±–µ—Å–Ω–∏–π –í–∞—Ä—Ç–æ–≤–∏–π</a>'

# –†–æ—É—Ç –¥–ª—è Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
@app.route('/')
def home():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Flask-—Å–µ—Ä–≤–µ—Ä–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
def run_web():
    port = int(os.getenv("PORT", 10000))
    app.run(host="0.0.0.0", port=port)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–µ–π–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤, —á—Ç–æ–±—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –∑–∞—Å—ã–ø–∞–ª–æ
def fake_requests():
    while True:
        try:
            requests.get("https://—Ç–≤–æ–π-—Å–µ—Ä–≤–∏—Å.onrender.com/")  # –£–∫–∞–∂–∏ —Å–≤–æ–π URL
            logger.info("–§–µ–π–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ Render.")
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–µ–π–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        
        time.sleep(120)

# –ó–∞–ø—É—Å–∫ Flask –∏ —Ñ–µ–π–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø–æ—Ç–æ–∫–∞—Ö
threading.Thread(target=run_web, daemon=True).start()
threading.Thread(target=fake_requests, daemon=True).start()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
@client.on(events.NewMessage(chats=source_channel_id))
async def handler(event):
    try:
        message_text = event.message.raw_text or ""
        message_media = event.message.media

        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        message_text = re.sub(url_pattern, '', message_text)
        message_text = re.sub(city_pattern, '', message_text).strip()
        message_text = re.sub(random_letters_pattern, '', message_text).strip()
        message_text = re.sub(unwanted_text_pattern, '', message_text).strip()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫
        if any(word in message_text for word in blacklist_words) or card_pattern.search(message_text):
            logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –∏–∑-–∑–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏.")
            return

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–¥–∏–∞
        if not message_text and message_media:
            await client.send_file(destination_channel_id, message_media)
            logger.info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ.")
            return

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Å –º–µ–¥–∏–∞
        if message_text:
            message_text += f"\n\n{extra_text}"

        if message_media:
            await client.send_file(destination_channel_id, message_media, caption=message_text, parse_mode='html')
            logger.info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ñ–æ—Ç–æ —Å —Ç–µ–∫—Å—Ç–æ–º.")
        else:
            await client.send_message(destination_channel_id, message_text, link_preview=False, parse_mode='html')
            logger.info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

# –û—Å–Ω–æ–≤–Ω–∞—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Telegram –∫–ª–∏–µ–Ω—Ç–∞
async def main():
    while True:
        try:
            await client.start()
            logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è...")
            await client.run_until_disconnected()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞: {e}. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")
            await asyncio.sleep(5)

# –ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
if __name__ == "__main__":
    loop = asyncio.get_event_loop()
    loop.run_until_complete(main())
